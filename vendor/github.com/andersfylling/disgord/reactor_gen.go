package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt reactor.go and event/events.go and run `go generate`

import (
	"context"
	"errors"
)

//////////////////////////////////////////////////////
//
// Helper funcs
//
//////////////////////////////////////////////////////

func defineResource(evt string) (resource evtResource) {
	switch evt {

	case EvtChannelCreate:
		resource = &ChannelCreate{}
	case EvtChannelDelete:
		resource = &ChannelDelete{}
	case EvtChannelPinsUpdate:
		resource = &ChannelPinsUpdate{}
	case EvtChannelUpdate:
		resource = &ChannelUpdate{}
	case EvtGuildBanAdd:
		resource = &GuildBanAdd{}
	case EvtGuildBanRemove:
		resource = &GuildBanRemove{}
	case EvtGuildCreate:
		resource = &GuildCreate{}
	case EvtGuildDelete:
		resource = &GuildDelete{}
	case EvtGuildEmojisUpdate:
		resource = &GuildEmojisUpdate{}
	case EvtGuildIntegrationsUpdate:
		resource = &GuildIntegrationsUpdate{}
	case EvtGuildMemberAdd:
		resource = &GuildMemberAdd{}
	case EvtGuildMemberRemove:
		resource = &GuildMemberRemove{}
	case EvtGuildMemberUpdate:
		resource = &GuildMemberUpdate{}
	case EvtGuildMembersChunk:
		resource = &GuildMembersChunk{}
	case EvtGuildRoleCreate:
		resource = &GuildRoleCreate{}
	case EvtGuildRoleDelete:
		resource = &GuildRoleDelete{}
	case EvtGuildRoleUpdate:
		resource = &GuildRoleUpdate{}
	case EvtGuildUpdate:
		resource = &GuildUpdate{}
	case EvtMessageCreate:
		resource = &MessageCreate{}
	case EvtMessageDelete:
		resource = &MessageDelete{}
	case EvtMessageDeleteBulk:
		resource = &MessageDeleteBulk{}
	case EvtMessageReactionAdd:
		resource = &MessageReactionAdd{}
	case EvtMessageReactionRemove:
		resource = &MessageReactionRemove{}
	case EvtMessageReactionRemoveAll:
		resource = &MessageReactionRemoveAll{}
	case EvtMessageUpdate:
		resource = &MessageUpdate{}
	case EvtPresenceUpdate:
		resource = &PresenceUpdate{}
	case EvtPresencesReplace:
		resource = &PresencesReplace{}
	case EvtReady:
		resource = &Ready{}
	case EvtResumed:
		resource = &Resumed{}
	case EvtTypingStart:
		resource = &TypingStart{}
	case EvtUserUpdate:
		resource = &UserUpdate{}
	case EvtVoiceServerUpdate:
		resource = &VoiceServerUpdate{}
	case EvtVoiceStateUpdate:
		resource = &VoiceStateUpdate{}
	case EvtWebhooksUpdate:
		resource = &WebhooksUpdate{}
	}

	return resource
}

//////////////////////////////////////////////////////
//
// Dispatcher: contructor + repetitive methods
//
//////////////////////////////////////////////////////

// newDispatcher construct a Dispatch object for reacting to web socket events
// from discord
func newDispatcher(activateEventChannels bool, evtChanSize int) *dispatcher {
	d := &dispatcher{
		activateEventChannels: activateEventChannels,
		handlerSpecs:          make(map[string][]*handlerSpec),
		shutdown:              make(chan struct{}),
	}

	if activateEventChannels {
		d.dispatcherChans = &dispatcherChans{

			channelCreateChan:            make(chan *ChannelCreate, evtChanSize),
			channelDeleteChan:            make(chan *ChannelDelete, evtChanSize),
			channelPinsUpdateChan:        make(chan *ChannelPinsUpdate, evtChanSize),
			channelUpdateChan:            make(chan *ChannelUpdate, evtChanSize),
			guildBanAddChan:              make(chan *GuildBanAdd, evtChanSize),
			guildBanRemoveChan:           make(chan *GuildBanRemove, evtChanSize),
			guildCreateChan:              make(chan *GuildCreate, evtChanSize),
			guildDeleteChan:              make(chan *GuildDelete, evtChanSize),
			guildEmojisUpdateChan:        make(chan *GuildEmojisUpdate, evtChanSize),
			guildIntegrationsUpdateChan:  make(chan *GuildIntegrationsUpdate, evtChanSize),
			guildMemberAddChan:           make(chan *GuildMemberAdd, evtChanSize),
			guildMemberRemoveChan:        make(chan *GuildMemberRemove, evtChanSize),
			guildMemberUpdateChan:        make(chan *GuildMemberUpdate, evtChanSize),
			guildMembersChunkChan:        make(chan *GuildMembersChunk, evtChanSize),
			guildRoleCreateChan:          make(chan *GuildRoleCreate, evtChanSize),
			guildRoleDeleteChan:          make(chan *GuildRoleDelete, evtChanSize),
			guildRoleUpdateChan:          make(chan *GuildRoleUpdate, evtChanSize),
			guildUpdateChan:              make(chan *GuildUpdate, evtChanSize),
			messageCreateChan:            make(chan *MessageCreate, evtChanSize),
			messageDeleteChan:            make(chan *MessageDelete, evtChanSize),
			messageDeleteBulkChan:        make(chan *MessageDeleteBulk, evtChanSize),
			messageReactionAddChan:       make(chan *MessageReactionAdd, evtChanSize),
			messageReactionRemoveChan:    make(chan *MessageReactionRemove, evtChanSize),
			messageReactionRemoveAllChan: make(chan *MessageReactionRemoveAll, evtChanSize),
			messageUpdateChan:            make(chan *MessageUpdate, evtChanSize),
			presenceUpdateChan:           make(chan *PresenceUpdate, evtChanSize),
			presencesReplaceChan:         make(chan *PresencesReplace, evtChanSize),
			readyChan:                    make(chan *Ready, evtChanSize),
			resumedChan:                  make(chan *Resumed, evtChanSize),
			typingStartChan:              make(chan *TypingStart, evtChanSize),
			userUpdateChan:               make(chan *UserUpdate, evtChanSize),
			voiceServerUpdateChan:        make(chan *VoiceServerUpdate, evtChanSize),
			voiceStateUpdateChan:         make(chan *VoiceStateUpdate, evtChanSize),
			webhooksUpdateChan:           make(chan *WebhooksUpdate, evtChanSize),
		}
	}

	return d
}

func (d *dispatcher) trigger(h Handler, evt resource) {
	switch t := h.(type) {
	case SimpleHandler:
		t(d.session)
	case SimplestHandler:
		t()
	case ChannelCreateHandler:
		t(d.session, evt.(*ChannelCreate))
	case ChannelDeleteHandler:
		t(d.session, evt.(*ChannelDelete))
	case ChannelPinsUpdateHandler:
		t(d.session, evt.(*ChannelPinsUpdate))
	case ChannelUpdateHandler:
		t(d.session, evt.(*ChannelUpdate))
	case GuildBanAddHandler:
		t(d.session, evt.(*GuildBanAdd))
	case GuildBanRemoveHandler:
		t(d.session, evt.(*GuildBanRemove))
	case GuildCreateHandler:
		t(d.session, evt.(*GuildCreate))
	case GuildDeleteHandler:
		t(d.session, evt.(*GuildDelete))
	case GuildEmojisUpdateHandler:
		t(d.session, evt.(*GuildEmojisUpdate))
	case GuildIntegrationsUpdateHandler:
		t(d.session, evt.(*GuildIntegrationsUpdate))
	case GuildMemberAddHandler:
		t(d.session, evt.(*GuildMemberAdd))
	case GuildMemberRemoveHandler:
		t(d.session, evt.(*GuildMemberRemove))
	case GuildMemberUpdateHandler:
		t(d.session, evt.(*GuildMemberUpdate))
	case GuildMembersChunkHandler:
		t(d.session, evt.(*GuildMembersChunk))
	case GuildRoleCreateHandler:
		t(d.session, evt.(*GuildRoleCreate))
	case GuildRoleDeleteHandler:
		t(d.session, evt.(*GuildRoleDelete))
	case GuildRoleUpdateHandler:
		t(d.session, evt.(*GuildRoleUpdate))
	case GuildUpdateHandler:
		t(d.session, evt.(*GuildUpdate))
	case MessageCreateHandler:
		t(d.session, evt.(*MessageCreate))
	case MessageDeleteHandler:
		t(d.session, evt.(*MessageDelete))
	case MessageDeleteBulkHandler:
		t(d.session, evt.(*MessageDeleteBulk))
	case MessageReactionAddHandler:
		t(d.session, evt.(*MessageReactionAdd))
	case MessageReactionRemoveHandler:
		t(d.session, evt.(*MessageReactionRemove))
	case MessageReactionRemoveAllHandler:
		t(d.session, evt.(*MessageReactionRemoveAll))
	case MessageUpdateHandler:
		t(d.session, evt.(*MessageUpdate))
	case PresenceUpdateHandler:
		t(d.session, evt.(*PresenceUpdate))
	case PresencesReplaceHandler:
		t(d.session, evt.(*PresencesReplace))
	case ReadyHandler:
		t(d.session, evt.(*Ready))
	case ResumedHandler:
		t(d.session, evt.(*Resumed))
	case TypingStartHandler:
		t(d.session, evt.(*TypingStart))
	case UserUpdateHandler:
		t(d.session, evt.(*UserUpdate))
	case VoiceServerUpdateHandler:
		t(d.session, evt.(*VoiceServerUpdate))
	case VoiceStateUpdateHandler:
		t(d.session, evt.(*VoiceStateUpdate))
	case WebhooksUpdateHandler:
		t(d.session, evt.(*WebhooksUpdate))
	}
}

//////////////////////////////////////////////////////
//
// Dispatcher: Event Channels
//
//////////////////////////////////////////////////////

type dispatcherChans struct {
	session Session

	channelCreateChan            chan *ChannelCreate
	channelDeleteChan            chan *ChannelDelete
	channelPinsUpdateChan        chan *ChannelPinsUpdate
	channelUpdateChan            chan *ChannelUpdate
	guildBanAddChan              chan *GuildBanAdd
	guildBanRemoveChan           chan *GuildBanRemove
	guildCreateChan              chan *GuildCreate
	guildDeleteChan              chan *GuildDelete
	guildEmojisUpdateChan        chan *GuildEmojisUpdate
	guildIntegrationsUpdateChan  chan *GuildIntegrationsUpdate
	guildMemberAddChan           chan *GuildMemberAdd
	guildMemberRemoveChan        chan *GuildMemberRemove
	guildMemberUpdateChan        chan *GuildMemberUpdate
	guildMembersChunkChan        chan *GuildMembersChunk
	guildRoleCreateChan          chan *GuildRoleCreate
	guildRoleDeleteChan          chan *GuildRoleDelete
	guildRoleUpdateChan          chan *GuildRoleUpdate
	guildUpdateChan              chan *GuildUpdate
	messageCreateChan            chan *MessageCreate
	messageDeleteChan            chan *MessageDelete
	messageDeleteBulkChan        chan *MessageDeleteBulk
	messageReactionAddChan       chan *MessageReactionAdd
	messageReactionRemoveChan    chan *MessageReactionRemove
	messageReactionRemoveAllChan chan *MessageReactionRemoveAll
	messageUpdateChan            chan *MessageUpdate
	presenceUpdateChan           chan *PresenceUpdate
	presencesReplaceChan         chan *PresencesReplace
	readyChan                    chan *Ready
	resumedChan                  chan *Resumed
	typingStartChan              chan *TypingStart
	userUpdateChan               chan *UserUpdate
	voiceServerUpdateChan        chan *VoiceServerUpdate
	voiceStateUpdateChan         chan *VoiceStateUpdate
	webhooksUpdateChan           chan *WebhooksUpdate
}

// EvtChan ... TODO
func (d *dispatcherChans) EvtChan(evt string) (channel interface{}, err error) {
	switch evt {

	case EvtChannelCreate:
		channel = d.ChannelCreate()
	case EvtChannelDelete:
		channel = d.ChannelDelete()
	case EvtChannelPinsUpdate:
		channel = d.ChannelPinsUpdate()
	case EvtChannelUpdate:
		channel = d.ChannelUpdate()
	case EvtGuildBanAdd:
		channel = d.GuildBanAdd()
	case EvtGuildBanRemove:
		channel = d.GuildBanRemove()
	case EvtGuildCreate:
		channel = d.GuildCreate()
	case EvtGuildDelete:
		channel = d.GuildDelete()
	case EvtGuildEmojisUpdate:
		channel = d.GuildEmojisUpdate()
	case EvtGuildIntegrationsUpdate:
		channel = d.GuildIntegrationsUpdate()
	case EvtGuildMemberAdd:
		channel = d.GuildMemberAdd()
	case EvtGuildMemberRemove:
		channel = d.GuildMemberRemove()
	case EvtGuildMemberUpdate:
		channel = d.GuildMemberUpdate()
	case EvtGuildMembersChunk:
		channel = d.GuildMembersChunk()
	case EvtGuildRoleCreate:
		channel = d.GuildRoleCreate()
	case EvtGuildRoleDelete:
		channel = d.GuildRoleDelete()
	case EvtGuildRoleUpdate:
		channel = d.GuildRoleUpdate()
	case EvtGuildUpdate:
		channel = d.GuildUpdate()
	case EvtMessageCreate:
		channel = d.MessageCreate()
	case EvtMessageDelete:
		channel = d.MessageDelete()
	case EvtMessageDeleteBulk:
		channel = d.MessageDeleteBulk()
	case EvtMessageReactionAdd:
		channel = d.MessageReactionAdd()
	case EvtMessageReactionRemove:
		channel = d.MessageReactionRemove()
	case EvtMessageReactionRemoveAll:
		channel = d.MessageReactionRemoveAll()
	case EvtMessageUpdate:
		channel = d.MessageUpdate()
	case EvtPresenceUpdate:
		channel = d.PresenceUpdate()
	case EvtPresencesReplace:
		channel = d.PresencesReplace()
	case EvtReady:
		channel = d.Ready()
	case EvtResumed:
		channel = d.Resumed()
	case EvtTypingStart:
		channel = d.TypingStart()
	case EvtUserUpdate:
		channel = d.UserUpdate()
	case EvtVoiceServerUpdate:
		channel = d.VoiceServerUpdate()
	case EvtVoiceStateUpdate:
		channel = d.VoiceStateUpdate()
	case EvtWebhooksUpdate:
		channel = d.WebhooksUpdate()
	default:
		err = errors.New("no event channel exists for given event: " + evt)
	}

	return
}

func (d *dispatcherChans) trigger(ctx context.Context, evtName string, evt resource) {
	switch evtName {

	case EvtChannelCreate:
		d.channelCreateChan <- evt.(*ChannelCreate)
	case EvtChannelDelete:
		d.channelDeleteChan <- evt.(*ChannelDelete)
	case EvtChannelPinsUpdate:
		d.channelPinsUpdateChan <- evt.(*ChannelPinsUpdate)
	case EvtChannelUpdate:
		d.channelUpdateChan <- evt.(*ChannelUpdate)
	case EvtGuildBanAdd:
		d.guildBanAddChan <- evt.(*GuildBanAdd)
	case EvtGuildBanRemove:
		d.guildBanRemoveChan <- evt.(*GuildBanRemove)
	case EvtGuildCreate:
		d.guildCreateChan <- evt.(*GuildCreate)
	case EvtGuildDelete:
		d.guildDeleteChan <- evt.(*GuildDelete)
	case EvtGuildEmojisUpdate:
		d.guildEmojisUpdateChan <- evt.(*GuildEmojisUpdate)
	case EvtGuildIntegrationsUpdate:
		d.guildIntegrationsUpdateChan <- evt.(*GuildIntegrationsUpdate)
	case EvtGuildMemberAdd:
		d.guildMemberAddChan <- evt.(*GuildMemberAdd)
	case EvtGuildMemberRemove:
		d.guildMemberRemoveChan <- evt.(*GuildMemberRemove)
	case EvtGuildMemberUpdate:
		d.guildMemberUpdateChan <- evt.(*GuildMemberUpdate)
	case EvtGuildMembersChunk:
		d.guildMembersChunkChan <- evt.(*GuildMembersChunk)
	case EvtGuildRoleCreate:
		d.guildRoleCreateChan <- evt.(*GuildRoleCreate)
	case EvtGuildRoleDelete:
		d.guildRoleDeleteChan <- evt.(*GuildRoleDelete)
	case EvtGuildRoleUpdate:
		d.guildRoleUpdateChan <- evt.(*GuildRoleUpdate)
	case EvtGuildUpdate:
		d.guildUpdateChan <- evt.(*GuildUpdate)
	case EvtMessageCreate:
		d.messageCreateChan <- evt.(*MessageCreate)
	case EvtMessageDelete:
		d.messageDeleteChan <- evt.(*MessageDelete)
	case EvtMessageDeleteBulk:
		d.messageDeleteBulkChan <- evt.(*MessageDeleteBulk)
	case EvtMessageReactionAdd:
		d.messageReactionAddChan <- evt.(*MessageReactionAdd)
	case EvtMessageReactionRemove:
		d.messageReactionRemoveChan <- evt.(*MessageReactionRemove)
	case EvtMessageReactionRemoveAll:
		d.messageReactionRemoveAllChan <- evt.(*MessageReactionRemoveAll)
	case EvtMessageUpdate:
		d.messageUpdateChan <- evt.(*MessageUpdate)
	case EvtPresenceUpdate:
		d.presenceUpdateChan <- evt.(*PresenceUpdate)
	case EvtPresencesReplace:
		d.presencesReplaceChan <- evt.(*PresencesReplace)
	case EvtReady:
		d.readyChan <- evt.(*Ready)
	case EvtResumed:
		d.resumedChan <- evt.(*Resumed)
	case EvtTypingStart:
		d.typingStartChan <- evt.(*TypingStart)
	case EvtUserUpdate:
		d.userUpdateChan <- evt.(*UserUpdate)
	case EvtVoiceServerUpdate:
		d.voiceServerUpdateChan <- evt.(*VoiceServerUpdate)
	case EvtVoiceStateUpdate:
		d.voiceStateUpdateChan <- evt.(*VoiceStateUpdate)
	case EvtWebhooksUpdate:
		d.webhooksUpdateChan <- evt.(*WebhooksUpdate)
	default:
		// if we land at this stage, the channel is either full or a unknown event has come through
		// empty the channel
		d.drainChannel(evtName)
	}
}

func (d *dispatcherChans) drainChannel(evtName string) {
	switch evtName {

	case EvtChannelCreate:
		for range d.channelCreateChan {
		}
	case EvtChannelDelete:
		for range d.channelDeleteChan {
		}
	case EvtChannelPinsUpdate:
		for range d.channelPinsUpdateChan {
		}
	case EvtChannelUpdate:
		for range d.channelUpdateChan {
		}
	case EvtGuildBanAdd:
		for range d.guildBanAddChan {
		}
	case EvtGuildBanRemove:
		for range d.guildBanRemoveChan {
		}
	case EvtGuildCreate:
		for range d.guildCreateChan {
		}
	case EvtGuildDelete:
		for range d.guildDeleteChan {
		}
	case EvtGuildEmojisUpdate:
		for range d.guildEmojisUpdateChan {
		}
	case EvtGuildIntegrationsUpdate:
		for range d.guildIntegrationsUpdateChan {
		}
	case EvtGuildMemberAdd:
		for range d.guildMemberAddChan {
		}
	case EvtGuildMemberRemove:
		for range d.guildMemberRemoveChan {
		}
	case EvtGuildMemberUpdate:
		for range d.guildMemberUpdateChan {
		}
	case EvtGuildMembersChunk:
		for range d.guildMembersChunkChan {
		}
	case EvtGuildRoleCreate:
		for range d.guildRoleCreateChan {
		}
	case EvtGuildRoleDelete:
		for range d.guildRoleDeleteChan {
		}
	case EvtGuildRoleUpdate:
		for range d.guildRoleUpdateChan {
		}
	case EvtGuildUpdate:
		for range d.guildUpdateChan {
		}
	case EvtMessageCreate:
		for range d.messageCreateChan {
		}
	case EvtMessageDelete:
		for range d.messageDeleteChan {
		}
	case EvtMessageDeleteBulk:
		for range d.messageDeleteBulkChan {
		}
	case EvtMessageReactionAdd:
		for range d.messageReactionAddChan {
		}
	case EvtMessageReactionRemove:
		for range d.messageReactionRemoveChan {
		}
	case EvtMessageReactionRemoveAll:
		for range d.messageReactionRemoveAllChan {
		}
	case EvtMessageUpdate:
		for range d.messageUpdateChan {
		}
	case EvtPresenceUpdate:
		for range d.presenceUpdateChan {
		}
	case EvtPresencesReplace:
		for range d.presencesReplaceChan {
		}
	case EvtReady:
		for range d.readyChan {
		}
	case EvtResumed:
		for range d.resumedChan {
		}
	case EvtTypingStart:
		for range d.typingStartChan {
		}
	case EvtUserUpdate:
		for range d.userUpdateChan {
		}
	case EvtVoiceServerUpdate:
		for range d.voiceServerUpdateChan {
		}
	case EvtVoiceStateUpdate:
		for range d.voiceStateUpdateChan {
		}
	case EvtWebhooksUpdate:
		for range d.webhooksUpdateChan {
		}
	}
}

// ChannelCreate gives access to channelCreateChan for ChannelCreate events
func (d *dispatcherChans) ChannelCreate() <-chan *ChannelCreate {
	return d.channelCreateChan
}

// ChannelDelete gives access to channelDeleteChan for ChannelDelete events
func (d *dispatcherChans) ChannelDelete() <-chan *ChannelDelete {
	return d.channelDeleteChan
}

// ChannelPinsUpdate gives access to channelPinsUpdateChan for ChannelPinsUpdate events
func (d *dispatcherChans) ChannelPinsUpdate() <-chan *ChannelPinsUpdate {
	return d.channelPinsUpdateChan
}

// ChannelUpdate gives access to channelUpdateChan for ChannelUpdate events
func (d *dispatcherChans) ChannelUpdate() <-chan *ChannelUpdate {
	return d.channelUpdateChan
}

// GuildBanAdd gives access to guildBanAddChan for GuildBanAdd events
func (d *dispatcherChans) GuildBanAdd() <-chan *GuildBanAdd {
	return d.guildBanAddChan
}

// GuildBanRemove gives access to guildBanRemoveChan for GuildBanRemove events
func (d *dispatcherChans) GuildBanRemove() <-chan *GuildBanRemove {
	return d.guildBanRemoveChan
}

// GuildCreate gives access to guildCreateChan for GuildCreate events
func (d *dispatcherChans) GuildCreate() <-chan *GuildCreate {
	return d.guildCreateChan
}

// GuildDelete gives access to guildDeleteChan for GuildDelete events
func (d *dispatcherChans) GuildDelete() <-chan *GuildDelete {
	return d.guildDeleteChan
}

// GuildEmojisUpdate gives access to guildEmojisUpdateChan for GuildEmojisUpdate events
func (d *dispatcherChans) GuildEmojisUpdate() <-chan *GuildEmojisUpdate {
	return d.guildEmojisUpdateChan
}

// GuildIntegrationsUpdate gives access to guildIntegrationsUpdateChan for GuildIntegrationsUpdate events
func (d *dispatcherChans) GuildIntegrationsUpdate() <-chan *GuildIntegrationsUpdate {
	return d.guildIntegrationsUpdateChan
}

// GuildMemberAdd gives access to guildMemberAddChan for GuildMemberAdd events
func (d *dispatcherChans) GuildMemberAdd() <-chan *GuildMemberAdd {
	return d.guildMemberAddChan
}

// GuildMemberRemove gives access to guildMemberRemoveChan for GuildMemberRemove events
func (d *dispatcherChans) GuildMemberRemove() <-chan *GuildMemberRemove {
	return d.guildMemberRemoveChan
}

// GuildMemberUpdate gives access to guildMemberUpdateChan for GuildMemberUpdate events
func (d *dispatcherChans) GuildMemberUpdate() <-chan *GuildMemberUpdate {
	return d.guildMemberUpdateChan
}

// GuildMembersChunk gives access to guildMembersChunkChan for GuildMembersChunk events
func (d *dispatcherChans) GuildMembersChunk() <-chan *GuildMembersChunk {
	return d.guildMembersChunkChan
}

// GuildRoleCreate gives access to guildRoleCreateChan for GuildRoleCreate events
func (d *dispatcherChans) GuildRoleCreate() <-chan *GuildRoleCreate {
	return d.guildRoleCreateChan
}

// GuildRoleDelete gives access to guildRoleDeleteChan for GuildRoleDelete events
func (d *dispatcherChans) GuildRoleDelete() <-chan *GuildRoleDelete {
	return d.guildRoleDeleteChan
}

// GuildRoleUpdate gives access to guildRoleUpdateChan for GuildRoleUpdate events
func (d *dispatcherChans) GuildRoleUpdate() <-chan *GuildRoleUpdate {
	return d.guildRoleUpdateChan
}

// GuildUpdate gives access to guildUpdateChan for GuildUpdate events
func (d *dispatcherChans) GuildUpdate() <-chan *GuildUpdate {
	return d.guildUpdateChan
}

// MessageCreate gives access to messageCreateChan for MessageCreate events
func (d *dispatcherChans) MessageCreate() <-chan *MessageCreate {
	return d.messageCreateChan
}

// MessageDelete gives access to messageDeleteChan for MessageDelete events
func (d *dispatcherChans) MessageDelete() <-chan *MessageDelete {
	return d.messageDeleteChan
}

// MessageDeleteBulk gives access to messageDeleteBulkChan for MessageDeleteBulk events
func (d *dispatcherChans) MessageDeleteBulk() <-chan *MessageDeleteBulk {
	return d.messageDeleteBulkChan
}

// MessageReactionAdd gives access to messageReactionAddChan for MessageReactionAdd events
func (d *dispatcherChans) MessageReactionAdd() <-chan *MessageReactionAdd {
	return d.messageReactionAddChan
}

// MessageReactionRemove gives access to messageReactionRemoveChan for MessageReactionRemove events
func (d *dispatcherChans) MessageReactionRemove() <-chan *MessageReactionRemove {
	return d.messageReactionRemoveChan
}

// MessageReactionRemoveAll gives access to messageReactionRemoveAllChan for MessageReactionRemoveAll events
func (d *dispatcherChans) MessageReactionRemoveAll() <-chan *MessageReactionRemoveAll {
	return d.messageReactionRemoveAllChan
}

// MessageUpdate gives access to messageUpdateChan for MessageUpdate events
func (d *dispatcherChans) MessageUpdate() <-chan *MessageUpdate {
	return d.messageUpdateChan
}

// PresenceUpdate gives access to presenceUpdateChan for PresenceUpdate events
func (d *dispatcherChans) PresenceUpdate() <-chan *PresenceUpdate {
	return d.presenceUpdateChan
}

// PresencesReplace gives access to presencesReplaceChan for PresencesReplace events
func (d *dispatcherChans) PresencesReplace() <-chan *PresencesReplace {
	return d.presencesReplaceChan
}

// Ready gives access to readyChan for Ready events
func (d *dispatcherChans) Ready() <-chan *Ready {
	return d.readyChan
}

// Resumed gives access to resumedChan for Resumed events
func (d *dispatcherChans) Resumed() <-chan *Resumed {
	return d.resumedChan
}

// TypingStart gives access to typingStartChan for TypingStart events
func (d *dispatcherChans) TypingStart() <-chan *TypingStart {
	return d.typingStartChan
}

// UserUpdate gives access to userUpdateChan for UserUpdate events
func (d *dispatcherChans) UserUpdate() <-chan *UserUpdate {
	return d.userUpdateChan
}

// VoiceServerUpdate gives access to voiceServerUpdateChan for VoiceServerUpdate events
func (d *dispatcherChans) VoiceServerUpdate() <-chan *VoiceServerUpdate {
	return d.voiceServerUpdateChan
}

// VoiceStateUpdate gives access to voiceStateUpdateChan for VoiceStateUpdate events
func (d *dispatcherChans) VoiceStateUpdate() <-chan *VoiceStateUpdate {
	return d.voiceStateUpdateChan
}

// WebhooksUpdate gives access to webhooksUpdateChan for WebhooksUpdate events
func (d *dispatcherChans) WebhooksUpdate() <-chan *WebhooksUpdate {
	return d.webhooksUpdateChan
}

//////////////////////////////////////////////////////
//
// Handler Signatures
//
//////////////////////////////////////////////////////

// ChannelCreateHandler is triggered in ChannelCreate events
type ChannelCreateHandler = func(session Session, h *ChannelCreate)

// ChannelDeleteHandler is triggered in ChannelDelete events
type ChannelDeleteHandler = func(session Session, h *ChannelDelete)

// ChannelPinsUpdateHandler is triggered in ChannelPinsUpdate events
type ChannelPinsUpdateHandler = func(session Session, h *ChannelPinsUpdate)

// ChannelUpdateHandler is triggered in ChannelUpdate events
type ChannelUpdateHandler = func(session Session, h *ChannelUpdate)

// GuildBanAddHandler is triggered in GuildBanAdd events
type GuildBanAddHandler = func(session Session, h *GuildBanAdd)

// GuildBanRemoveHandler is triggered in GuildBanRemove events
type GuildBanRemoveHandler = func(session Session, h *GuildBanRemove)

// GuildCreateHandler is triggered in GuildCreate events
type GuildCreateHandler = func(session Session, h *GuildCreate)

// GuildDeleteHandler is triggered in GuildDelete events
type GuildDeleteHandler = func(session Session, h *GuildDelete)

// GuildEmojisUpdateHandler is triggered in GuildEmojisUpdate events
type GuildEmojisUpdateHandler = func(session Session, h *GuildEmojisUpdate)

// GuildIntegrationsUpdateHandler is triggered in GuildIntegrationsUpdate events
type GuildIntegrationsUpdateHandler = func(session Session, h *GuildIntegrationsUpdate)

// GuildMemberAddHandler is triggered in GuildMemberAdd events
type GuildMemberAddHandler = func(session Session, h *GuildMemberAdd)

// GuildMemberRemoveHandler is triggered in GuildMemberRemove events
type GuildMemberRemoveHandler = func(session Session, h *GuildMemberRemove)

// GuildMemberUpdateHandler is triggered in GuildMemberUpdate events
type GuildMemberUpdateHandler = func(session Session, h *GuildMemberUpdate)

// GuildMembersChunkHandler is triggered in GuildMembersChunk events
type GuildMembersChunkHandler = func(session Session, h *GuildMembersChunk)

// GuildRoleCreateHandler is triggered in GuildRoleCreate events
type GuildRoleCreateHandler = func(session Session, h *GuildRoleCreate)

// GuildRoleDeleteHandler is triggered in GuildRoleDelete events
type GuildRoleDeleteHandler = func(session Session, h *GuildRoleDelete)

// GuildRoleUpdateHandler is triggered in GuildRoleUpdate events
type GuildRoleUpdateHandler = func(session Session, h *GuildRoleUpdate)

// GuildUpdateHandler is triggered in GuildUpdate events
type GuildUpdateHandler = func(session Session, h *GuildUpdate)

// MessageCreateHandler is triggered in MessageCreate events
type MessageCreateHandler = func(session Session, h *MessageCreate)

// MessageDeleteHandler is triggered in MessageDelete events
type MessageDeleteHandler = func(session Session, h *MessageDelete)

// MessageDeleteBulkHandler is triggered in MessageDeleteBulk events
type MessageDeleteBulkHandler = func(session Session, h *MessageDeleteBulk)

// MessageReactionAddHandler is triggered in MessageReactionAdd events
type MessageReactionAddHandler = func(session Session, h *MessageReactionAdd)

// MessageReactionRemoveHandler is triggered in MessageReactionRemove events
type MessageReactionRemoveHandler = func(session Session, h *MessageReactionRemove)

// MessageReactionRemoveAllHandler is triggered in MessageReactionRemoveAll events
type MessageReactionRemoveAllHandler = func(session Session, h *MessageReactionRemoveAll)

// MessageUpdateHandler is triggered in MessageUpdate events
type MessageUpdateHandler = func(session Session, h *MessageUpdate)

// PresenceUpdateHandler is triggered in PresenceUpdate events
type PresenceUpdateHandler = func(session Session, h *PresenceUpdate)

// PresencesReplaceHandler is triggered in PresencesReplace events
type PresencesReplaceHandler = func(session Session, h *PresencesReplace)

// ReadyHandler is triggered in Ready events
type ReadyHandler = func(session Session, h *Ready)

// ResumedHandler is triggered in Resumed events
type ResumedHandler = func(session Session, h *Resumed)

// TypingStartHandler is triggered in TypingStart events
type TypingStartHandler = func(session Session, h *TypingStart)

// UserUpdateHandler is triggered in UserUpdate events
type UserUpdateHandler = func(session Session, h *UserUpdate)

// VoiceServerUpdateHandler is triggered in VoiceServerUpdate events
type VoiceServerUpdateHandler = func(session Session, h *VoiceServerUpdate)

// VoiceStateUpdateHandler is triggered in VoiceStateUpdate events
type VoiceStateUpdateHandler = func(session Session, h *VoiceStateUpdate)

// WebhooksUpdateHandler is triggered in WebhooksUpdate events
type WebhooksUpdateHandler = func(session Session, h *WebhooksUpdate)
